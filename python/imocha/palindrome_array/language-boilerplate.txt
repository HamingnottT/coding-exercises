# Python

def findPalindrome(N, A):
    # this is default OUTPUT. You can change it.
    result = -404

    # write your Logic here:
    
    
    return result


# INPUT [uncomment & modify if required]

N = int(input())
temp = input().split()
A = []
for i in range(N):
    A.append(int(temp[i]))

# OUTPUT [uncomment & modify if required]
print(findPalindrome(N, A))

# Scala

import java.io._
import scala.util.control.Breaks._
import scala.collection.immutable.Vector._

object Main 
{ 
    def findPalindromes(N: Int, A: Array[Int]): Int = {
        //this is default OUTPUT. You can change it.
        val result: Int = -404
        
        //write your LOGIC here:
        
        
        return result
    }
    
    def main(args: Array[String]) 
    {
        // INPUT [uncomment & modify if required]
	    val N: Int = scala.io.StdIn.readLine.toInt
        
        val A: Array[Int] = readLine.split(" ").map(_.toInt)

        // OUTPUT [uncomment & modify if required]
        print(findPalindromes(N, A))
	}
}


# Java

import java.util.*;
import java.io.*;
import java.lang.Math;

public class Main
{ 
  public static int findPalindrome(int N, int []A)
  {

    //this is default OUTPUT. You can change it.
    int result = -404;

    //write your Logic here:


      return result;
  }
  public static void main (String[]args)
  {
    Scanner sc = new Scanner (System.in);

    //INPUT [uncomment & modify if required]
    int N = sc.nextInt ();
    int[] A = new int[N];

    for (int i = 0; i < N; i++)
    {
	    A[i] = sc.nextInt ();
    }
    sc.close ();

    //OUTPUT [uncomment & modify if required]
    System.out.print(findPalindrome(N, A));
  }
}